?txtInput
library(shiny)
library(shinydashboard)
?txtInput
?textInput
x <- '(4,5)'
x <- gsub('[() ]', '', x)
x <- strsplit(x, ',')
x <- unlist(x, recursive = TRUE)
x
x <- '[[1,2,3],[4,5,6],[7,8,9]]'
x <- '[[1,2,3],[4,5,6],[7,8,9]]'
x <- gsub('(\],)', '', x)
x <- '[[1,2,3],[4,5,6],[7,8,9]]'
x <- gsub('(\\],)', '', x)
x <- '[[1,2,3],[4,5,6],[7,8,9]]'
x <- gsub('(\\],)', ']|', x)
x <- gsub('[\\[\\] ]', '', x)
x <- '[[1,2,3],[4,5,6],[7,8,9]]'
x <- gsub('(\\],)', ']|', x)
x <- gsub('[\\[\\] ]', '', x)
x <- gsub('[\[\] ]', '', x)
x <- '[[1,2,3],[4,5,6],[7,8,9]]'
x <- gsub('(\\],)', ']|', x)
x <- gsub('(\\[|\\])', '', x)
x <- strsplit(x, '|')
x
x <- '[[1,2,3],[4,5,6],[7,8,9]]'
x <- gsub('(\\],)', ']|', x)
x <- gsub('(\\[|\\])', '', x)
x <- strsplit(x, '|')
x
?strsplit
x <- '[[1,2,3],[4,5,6],[7,8,9]]'
x <- gsub('(\\],)', ']|', x)
x <- gsub('(\\[|\\])', '', x)
y <- strsplit(x, '|', fixed = T)
y
x <- '[[1,2,3],[4,5,6],[7,8,9]]'
x <- gsub('(\\],)', ']|', x)
x <- gsub('(\\[|\\])', '', x)
x <- strsplit(x, '|', fixed = T)
x
x[[1]]
x[[1]][0]
x[[1]][1]
x[[1]][2]
x[[1]][3]
for row in 1:
x <- unlist(x, recursive = TRUE)
x
length(x)
?apply
apply(x, 1, gsub, ',')
x
apply(x, 1, strsplit, ',')
x
as.matrix(x)
apply(as.matrix(x), 1, strsplit, ',')
print(row)
x <- '[[1,2,3],[4,5,6],[7,8,9]]'
x <- gsub('(\\],)', ']|', x)
x <- gsub('(\\[|\\])', '', x)
x <- strsplit(x, '|', fixed = T)
x <- unlist(x, recursive = TRUE)
for(row in 1:length(x)){
print(row)
}
x <- '[[1,2,3],[4,5,6],[7,8,9]]'
x <- gsub('(\\],)', ']|', x)
x <- gsub('(\\[|\\])', '', x)
x <- strsplit(x, '|', fixed = T)
x <- unlist(x, recursive = TRUE)
print(x[[row]])
for(row in 1:length(x)){
print(x[[row]])
}
print(row)
for(i in 1:length(x)){
row <- unlist(strsplit(x[[i]], ','), recursive = TRUE)
print(row)
}
x_matrix <- c()
x.matrix <- c()
for(i in 1:length(x)){
row <- unlist(strsplit(x[[i]], ','), recursive = TRUE)
x.matrix <- c(x.matrix, row)
}
x.matrix
class(row)
as.vector(row)
x.matrix <- c()
for(i in 1:length(x)){
row <- unlist(strsplit(x[[i]], ','), recursive = TRUE)
x.matrix <- c(x.matrix, as.vector(row))
}
x.matrix
x.matrix
y <- c(c(1,2,3), c(4,5,6), c(7,8,9))
y
x.matrix <- list()
x
x <- strssplit(x, ',')
x <- strsplit(x, ',')
x
x <- '[4,5,6]'
x <- gsub('(\\],)', ']|', x)
x <- gsub('(\\[|\\])', '', x)
x <- strsplit(x, '|', fixed = T)
x <- strsplit(x, ',')
x <- strsplit(x, '|', fixed = T)
x <- '[4,5,6]'
x <- gsub('(\\],)', ']|', x)
x <- gsub('(\\[|\\])', '', x)
x <- strsplit(x, ',')
x
x <- '[[1,2,3],[4,5,6],[7,8,9]]'
x <- '[4,5,6]'
parse_input(x, 'vector')
parse_input(input, type){
x <- input
x <- gsub('(\\],)', ']|', x)
x <- gsub('(\\[|\\])', '', x)
if(type == 'matrix'){
x <- strsplit(x, '|', fixed = T)
x <- strsplit(x, ',')
} else {
x <- strsplit(x, ',')
x <- unlist(x, recursive = TRUE)
}
return(x)
}
parse_input <- function(input, type){
x <- input
x <- gsub('(\\],)', ']|', x)
x <- gsub('(\\[|\\])', '', x)
if(type == 'matrix'){
x <- strsplit(x, '|', fixed = T)
x <- strsplit(x, ',')
} else {
x <- strsplit(x, ',')
x <- unlist(x, recursive = TRUE)
}
return(x)
}
parse_input(x, 'vector')
y <- parse_input(x, 'vector')
y
y <- parse_input(x, 'matrix')
y
x <- '[[1,2,3],[4,5,6],[7,8,9]]'
parse_input <- function(input, type){
x <- input
x <- gsub('(\\],)', ']|', x)
x <- gsub('(\\[|\\])', '', x)
if(type == 'matrix'){
x <- strsplit(x, '|', fixed = T)
print(x)
x <- strsplit(x, ',')
} else {
x <- strsplit(x, ',')
x <- unlist(x, recursive = TRUE)
}
return(x)
}
y <- parse_input(x, 'matrix')
y
x <- '[[1,2,3],[4,5,6],[7,8,9]]'
x <- gsub('(\\],)', ']|', x)
x <- gsub('(\\[|\\])', '', x)
x <- strsplit(x, '|', fixed = T)
x <- strsplit(x, ',')
x <- '[[1,2,3],[4,5,6],[7,8,9]]'
x <- gsub('(\\],)', ']|', x)
x <- gsub('(\\[|\\])', '', x)
x <- strsplit(x, '|', fixed = T)
x <- strsplit(x, ',')
x <- unlist(x, recursive = T)
x <- strsplit(x, ',')
x <- '[[1,2,3],[4,5,6],[7,8,9]]'
y <- parse_input(x, 'matrix')
y
x <- '[[1,2,3],[4,5,6],[7,8,9]]'
parse_input <- function((input, type){
x <- input
x <- gsub('(\\],)', ']|', x)
x <- gsub('(\\[|\\])', '', x)
if(type == 'matrix'){
x <- strsplit(x, '|', fixed = T)
x <- unlist(x, recursive = T)
x <- strsplit(x, ',')
} else {
x <- strsplit(x, ',')
x <- unlist(x, recursive = TRUE)
}
return(x)
}
x <- '[[1,2,3],[4,5,6],[7,8,9]]'
parse_input <- function(input, type){
x <- input
x <- gsub('(\\],)', ']|', x)
x <- gsub('(\\[|\\])', '', x)
if(type == 'matrix'){
x <- strsplit(x, '|', fixed = T)
x <- unlist(x, recursive = T)
x <- strsplit(x, ',')
} else {
x <- strsplit(x, ',')
x <- unlist(x, recursive = TRUE)
}
return(x)
}
y <- parse_input(x, 'matrix')
y
x <- '[4,5,6]'
y <- parse_input(x, 'vector')
y
runApp()
runApp()
c <- [1,2,3]
c <- c(1,2,3)
as.character(c)
c <- c(1,2,3)
c <- c(4,5,6)
d <- list()
d[[1]] <- c
c <- c(1,2,3)
c2 <- c(4,5,6)
d <- list()
d[[1]] <- c
d[[2]] <- c2
as.character(c)
as.character(d)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
x <- '[[1,2,3],[4,5,6],[7,8,9]]'
x <- '[4,5,6]'
parse_input <- function(input, type){
x <- input
x <- gsub('(\\],)', ']|', x)
x <- gsub('(\\[|\\])', '', x)
if(type == 'matrix'){
x <- strsplit(x, '|', fixed = T)
x <- unlist(x, recursive = T)
x <- strsplit(x, ',')
} else {
x <- strsplit(x, ',')
#x <- unlist(x, recursive = TRUE)
}
return(x)
}
y <- parse_input(x, 'vector')
y
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
